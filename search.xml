<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Semantic Versioning</title>
      <link href="/sunshine-carroll.github.io/2020/07/29/Semantic-Versioning/"/>
      <url>/sunshine-carroll.github.io/2020/07/29/Semantic-Versioning/</url>
      
        <content type="html"><![CDATA[<p>转自<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">https://semver.org</a></p><h1 id="语义化版本-2-0-0"><a href="#语义化版本-2-0-0" class="headerlink" title="语义化版本 2.0.0"></a>语义化版本 2.0.0</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ol><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ol><p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p><p>在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。</p><p>作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：X.Y.Z（主版本号.次版本号.修订号）修复问题但不影响 API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。</p><p>我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p><h2 id="语义化版本控制规范（SemVer）"><a href="#语义化版本控制规范（SemVer）" class="headerlink" title="语义化版本控制规范（SemVer）"></a>语义化版本控制规范（SemVer）</h2><p>以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）</p><ol><li><p>使用语义化版本控制的软件“必须 MUST ”定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</p></li><li><p>标准的版本号“必须 MUST ”采用 XYZ 的格式，其中 X、Y 和 Z 为非负的整数，且“禁止 MUST NOT”在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素“必须 MUST ”以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</p></li><li><p>标记版本号的软件发行后，“禁止 MUST NOT ”改变该版本软件的内容。任何修改都“必须 MUST ”以新版本发行。</p></li><li><p>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。</p></li><li><p>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。</p></li><li><p>修订号 Z（x.y.Z <code>|</code> x &gt; 0）“必须 MUST ”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</p></li><li><p>次版本号 Y（x.Y.z <code>|</code> x &gt; 0）“必须 MUST ”在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也“必须 MUST ”递增。也“可以 MAY ”在内部程序有大量新功能或改进被加入时递增，其中“可以 MAY ”包括修订级别的改变。每当次版本号递增时，修订号“必须 MUST ”归零。</p></li><li><p>主版本号 X（X.y.z <code>|</code> X &gt; 0）“必须 MUST ”在有任何不兼容的修改被加入公共 API 时递增。其中“可以 MAY ”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须 MUST ”归零。</p></li><li><p>先行版本号“可以 MAY ”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。数字型的标识符号“禁止 MUST NOT ”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</p></li><li><p>版本编译信息“可以 MAY ”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。当判断版本的优先层级时，版本编译信息“可 SHOULD ”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</p></li><li><p>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0。</p></li></ol><h2 id="为什么要使用语义化的版本控制？"><a href="#为什么要使用语义化的版本控制？" class="headerlink" title="为什么要使用语义化的版本控制？"></a>为什么要使用语义化的版本控制？</h2><p>这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。</p><p>举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的套件。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定相依于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的套件管理系统，因为它们能与原有相依的软件兼容。</p><p>作为一位负责任的开发者，你理当确保每次套件升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级套件，而无需推出新的相依套件，节省你的时间及烦恼。</p><p>如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="在-0-y-z-初始开发阶段，我该如何进行版本控制？"><a href="#在-0-y-z-初始开发阶段，我该如何进行版本控制？" class="headerlink" title="在 0.y.z 初始开发阶段，我该如何进行版本控制？"></a>在 0.y.z 初始开发阶段，我该如何进行版本控制？</h3><p>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p><h3 id="如何判断发布-1-0-0-版本的时机？"><a href="#如何判断发布-1-0-0-版本的时机？" class="headerlink" title="如何判断发布 1.0.0 版本的时机？"></a>如何判断发布 1.0.0 版本的时机？</h3><p>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。</p><h3 id="这不会阻碍快速开发和迭代吗？"><a href="#这不会阻碍快速开发和迭代吗？" class="headerlink" title="这不会阻碍快速开发和迭代吗？"></a>这不会阻碍快速开发和迭代吗？</h3><p>主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。</p><h3 id="对于公共-API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到-42-0-0-版？"><a href="#对于公共-API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到-42-0-0-版？" class="headerlink" title="对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？"></a>对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</h3><p>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p><h3 id="为整个公共-API-写文件太费事了！"><a href="#为整个公共-API-写文件太费事了！" class="headerlink" title="为整个公共 API 写文件太费事了！"></a>为整个公共 API 写文件太费事了！</h3><p>为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。</p><h3 id="万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？"><a href="#万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？" class="headerlink" title="万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？"></a>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？</h3><p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。</p><h3 id="如果我更新了自己的依赖但没有改变公共-API-该怎么办？"><a href="#如果我更新了自己的依赖但没有改变公共-API-该怎么办？" class="headerlink" title="如果我更新了自己的依赖但没有改变公共 API 该怎么办？"></a>如果我更新了自己的依赖但没有改变公共 API 该怎么办？</h3><p>由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。</p><h3 id="如果我变更了公共-API-但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）"><a href="#如果我变更了公共-API-但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）" class="headerlink" title="如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）"></a>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</h3><p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p><h3 id="我该如何处理即将弃用的功能？"><a href="#我该如何处理即将弃用的功能？" class="headerlink" title="我该如何处理即将弃用的功能？"></a>我该如何处理即将弃用的功能？</h3><p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p><h3 id="语义化版本对于版本的字串长度是否有限制呢？"><a href="#语义化版本对于版本的字串长度是否有限制呢？" class="headerlink" title="语义化版本对于版本的字串长度是否有限制呢？"></a>语义化版本对于版本的字串长度是否有限制呢？</h3><p>没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。</p><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>语义化版本控制的规范是由 Gravatars 创办者兼 GitHub 共同创办者 <a href="http://tom.preston-werner.com/" target="_blank" rel="noopener">Tom Preston-Werner</a> 所建立。</p><p>如果您有任何建议，请到 <a href="https://github.com/mojombo/semver/issues" target="_blank" rel="noopener">GitHub 上提出您的问题</a>。</p><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>创用 CC 姓名标示 3.0 Unported 授权条款 <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank" rel="noopener">http://creativecommons.org/licenses/by/3.0/</a></p><hr><hr><h1 id="非转载部分"><a href="#非转载部分" class="headerlink" title="非转载部分"></a>非转载部分</h1><p><img src="/sunshine-carroll.github.io/2020/07/29/Semantic-Versioning/版本变化.png" alt="版本变化"></p><h3 id="规范化-git-commit-message"><a href="#规范化-git-commit-message" class="headerlink" title="规范化 git commit message"></a>规范化 git commit message</h3><p>git commit message 能够帮助git用户在提交更新时描述更新的内容，随着项目的推进，提交的记录越来越多，规范化的commit message 格式能够有效的描述版本的变迁记录。可以参考<a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit" target="_blank" rel="noopener">Angular的提交规范</a>,<code>Intelij Idea</code>有插件支持提交模版的使用，包括但不限于</p><ul><li><a href="https://plugins.jetbrains.com/plugin/10100-git-commit-message-plugin/" target="_blank" rel="noopener">git commit message plugin</a></li><li><a href="https://plugins.jetbrains.com/plugin/13477-git-commit-message-helper/" target="_blank" rel="noopener">git commit message helper</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> version control </category>
          
      </categories>
      
      
        <tags>
            
            <tag> version control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-resources</title>
      <link href="/sunshine-carroll.github.io/2020/07/24/spring-resources/"/>
      <url>/sunshine-carroll.github.io/2020/07/24/spring-resources/</url>
      
        <content type="html"><![CDATA[<p>本文主要参考于Spring官方文档中spring-core resources 部分，加上自身的见解，水平有限，如有不足之处欢迎在下方评论交流。</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>&emsp;&emsp;在编程中，有时需要访问位于不同地方的资源，这些资源可能在文件系统，网络环境，或一个web应用等环境中。然而对于使用这些资源的客户端程序员来说，他们更加关心的是资源的内容，资源是否存在，让这些客户端代码去关心如何去获取这些资源只能无端增加客户端代码的复杂性。分散实现核心职责的注意力。spring-core 中的resources部分，体现了Spring对资源的处理方式。</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p>&emsp;&emsp;Bruce Eckel 把对象认为是<code>问题空间</code>中的元素及其<code>解空间</code>的表示-We refer to the elements in the <code>problem space</code> and their representations in the <code>solution space</code> as “objects.”面向对象的设计可以从<code>问题空间</code>入手，发现<code>问题空间</code>中存在的概念和元素。</p><p>&emsp;&emsp;资源概念自然是Spring资源处理机制的核心概念之一，Spring <code>Resource</code>接口抽象了资源的行为，这些见名知义的行为(方法)是使用资源的人通常关心的功能。</p><p><img src="/sunshine-carroll.github.io/2020/07/24/spring-resources/resource.png" alt="resource" style="zoom: 67%;"></p><h3 id="e-g"><a href="#e-g" class="headerlink" title="e.g"></a>e.g</h3><p>&emsp;&emsp;举个小例子，下面是Spring 加载free marker配置的代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">package</span> org.springframework.ui.freemarker;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeMarkerConfigurationFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocation</span><span class="params">(Resource resource)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.configLocation = resource;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">createConfiguration</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TemplateException </span>&#123;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;具有<code>FreeMarkerConfigurationFactory</code>类型的对象只需要设置配置资源的就能够读取资源内容创建配置对象而不用关心配置文件在哪，同时客户端代码也能提供不同形式的配置获取方式并不用关心资源如何被解析</p><h2 id="ResourceLoader"><a href="#ResourceLoader" class="headerlink" title="ResourceLoader"></a>ResourceLoader</h2><p>&emsp;&emsp;有了资源的抽象后,客户端代码可以不用关心资源的加载，但是资源也不能无中生有。Spring把这份职责交给了<code>ResourceLoader</code></p><p><img src="/sunshine-carroll.github.io/2020/07/24/spring-resources/resource_loader.png" alt="resource" style="zoom: 67%;"></p><p>&emsp;&emsp;这个一个典型的工厂方法设计模式,<code>getResource</code>方法的String参数作为一个<code>信使对象</code>，描述了创建资源的信息。这样的工厂方法的案例还有javascript 中 document.createElement(input)。</p><p>&emsp;&emsp;在Spring中所有的ApplicationContext都实现了ResourceLoader接口</p><h3 id="getResource方法参数的格式"><a href="#getResource方法参数的格式" class="headerlink" title="getResource方法参数的格式"></a>getResource方法参数的格式</h3><p>&emsp;&emsp;Spring <code>ResourceLoader</code>的实现，约定getResource方法参数的格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[prefix] &lt;path&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;prefix 表示可选 前缀path 表示必选的路径</p><div class="table-container"><table><thead><tr><th style="text-align:center">prefix</th><th style="text-align:center">explanation</th></tr></thead><tbody><tr><td style="text-align:center">classpath:</td><td style="text-align:center">从类路径加载</td></tr><tr><td style="text-align:center">file:</td><td style="text-align:center">从文件系统加载</td></tr><tr><td style="text-align:center">https:</td><td style="text-align:center">从网络中加载</td></tr><tr><td style="text-align:center">jar:</td><td style="text-align:center">从jar包中加载</td></tr><tr><td style="text-align:center">war:</td><td style="text-align:center">从tomcat的war包中加载</td></tr><tr><td style="text-align:center">(none)</td><td style="text-align:center">取决于ApplicationContext的实现</td></tr></tbody></table></div><h2 id="ResourceLoaderAware"><a href="#ResourceLoaderAware" class="headerlink" title="ResourceLoaderAware"></a>ResourceLoaderAware</h2><p>&emsp;&emsp;Spring提供一系列的名为<code>*Aware</code>的回调接口,使得<code>Bean</code>可以告诉<code>IOC容器</code>需要什么样的依赖,这样容器在创建<code>Bean</code>的时候会尽量满足这些依赖。实现<code>ResourceLoaderAware</code>接口的Bean被容器识别为<code>ResourceLoaderAware</code>类型，并调用setResourceLoader方法，<code>Bean</code>可以通过这个方法访问容器的<code>ResourceLoader</code></p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>&emsp;&emsp;了解一个框架的使用方式和原理最直接有效的方式是去看官方文档，内容全面。可以减少发生不知名错误出现的概率，这些错误可能难以在搜索引擎中找到解决方式。更多内容请看Spring官方提供的文档。包括但不限于:</p><ul><li>Spring 内建的<code>Resource</code>，如<code>URLResource</code>，<code>ClassPathResource</code>等</li><li>不同的<code>ApplicationContext</code>默认加载什么类型的<code>Resource</code></li><li><code>FileSystemApplicationContext</code>和其余<code>ApplicationContext</code>在加载文件系统中绝对路径和相对路径资源的区别</li><li>classpath*: 这样的前缀在什么样的场景使用，并且不应该如何使用</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#resources" target="_blank" rel="noopener">Spring Reference</a></li><li><a href="https://lingcoder.github.io/OnJava8/#/" target="_blank" rel="noopener">On Java 8</a></li><li>四人帮 设计模式</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring-core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-Architecture</title>
      <link href="/sunshine-carroll.github.io/2020/02/29/Shiro-Architecture/"/>
      <url>/sunshine-carroll.github.io/2020/02/29/Shiro-Architecture/</url>
      
        <content type="html"><![CDATA[<p>翻译自官方文档—<a href="http://shiro.apache.org/architecture.html" target="_blank" rel="noopener">原文地址</a></p><h2 id="Apache-Shiro-Architecture-（Apache-Shiro-架构"><a href="#Apache-Shiro-Architecture-（Apache-Shiro-架构" class="headerlink" title="Apache Shiro Architecture （Apache Shiro 架构)"></a>Apache Shiro Architecture （Apache Shiro 架构)</h2><p>Apache Shiro’s design goals are to simplify application security by being intuitive and easy to use. Shiro’s core design models how most people think about application security - in the context of someone (or something) interacting with an application.  </p><p>Aache Shiro设计的目标是通过直觉化和简易实用设计来简化应用程序安全性开发. Shiro 核心设计模型是 在某人或某物与应用程序交互的场景下，人们对应用程序安全思维方式 </p><hr><p>Software applications are usually designed based on user stories. That is, you’ll often design user interfaces or service APIs based on how a user would (or should) interact with the software. For example, you might say, “If the user interacting with my application is logged in, I will show them a button they can click to view their account information. If they are not logged in, I will show a sign-up button.”</p><p>应用程序软件通常基于用户故事设计。这意味着，你将在设计用户接口或服务API时经常基于一个用户将(或应该)如何和软件交互。举个例子，你可能会说”如果一个用户与我程序交互式已经登入，我将给他们展示一个可以点击查看他们账户信息的按钮，如果他们没有登入，我将展示一个注册按钮”</p><hr><p>This example statement indicates that applications are largely written to satisfy user requirements and needs. Even if the ‘user’ is another software system and not a human being, you still write code to reflect behavior based on who (or what) is currently interacting with your software.</p><p>这个例子的陈述表明一个应用程序通常为了满足用户要求或需求而编写。甚至这个”用户”是其他软件系统而非人类时，你仍需要基于当前与你的软件系统交互的人或物表现出的行为来编写代码</p><hr><p>Shiro reflects these concepts in its own design. By matching what is already intuitive for software developers, Apache Shiro remains intuitive and easy to use in practically any application.</p><p>Shiro 使用自身的设计来表现这些概念。通过联系对于软件开发者来说已有的直观事物，Apache Shiro 几乎可以在任意应用中保留直观性和易用性</p><h2 id="Hign-Level-Overview-高层总览"><a href="#Hign-Level-Overview-高层总览" class="headerlink" title="Hign-Level Overview (高层总览)"></a>Hign-Level Overview (高层总览)</h2><p>At the highest conceptual level, Shiro’s architecture has 3 primary concepts: the <code>Subject</code>, <code>SecurityManager</code> and <code>Realms</code>. The following diagram is a high-level overview of how these components interact, and we’ll cover each concept below:</p><p>在最顶层的概念层中，Shiro 架构有三个主要概念:<code>Subject</code>,<code>SecurityManager</code>和<code>Realms</code>,下图就是这些组件如何交互的一个概念层总览。我们会在下面阐述各个概念</p><p><img src="/sunshine-carroll.github.io/2020/02/29/Shiro-Architecture/ShiroBasicArchitecture.png" alt="ShiroBasicArchitecture"></p><hr><blockquote><ul><li><p><strong>Subject</strong>: As we’ve mentioned in our <a href="http://shiro.apache.org/tutorial.html" target="_blank" rel="noopener">Tutorial</a>, the <code>Subject</code> is essentially a security specific ‘view’ of the the currently executing user. Whereas the word ‘User’ often implies a human being, a <code>Subject</code> can be a person, but it could also represent a 3rd-party service, daemon account, cron job, or anything similar - basically anything that is currently interacting with the software.</p><p><code>Subject</code> instances are all bound to (and require) a <code>SecurityManager</code>. When you interact with a <code>Subject</code>, those interactions translate to subject-specific interactions with the <code>SecurityManager</code>.</p></li><li><p><strong>Subject</strong>: 就像我们在教程中提到的，<code>Subject</code>本质上就是当前执行用户的在安全领域上一个特定的视角，然而”用户”一词通常暗指人类，一个<code>Subject</code>可以是一个人，也可以表示为第三方服务，守护进程账户，定时任务或者任意相似的与当前软件交互的事物</p><p><code>Subject</code>实例都和一个<code>SecurityManager</code>绑定。当你和一个<code>Subject</code>交互时，这些交互就转化为subject-specific 与<code>SecurityManager</code>交互</p></li><li><p><strong>SecurityManager</strong>: The <code>SecurityManager</code> is the heart of Shiro’s architecture and acts as a sort of ’umbrella’ object that coordinates its internal security components that together form an object graph. However, once the SecurityManager and its internal object graph is configured for an application, it is usually left alone and application developers spend almost all of their time with the <code>Subject</code> API.</p><p>We will talk about the <code>SecurityManager</code> in detail later on, but it is important to realize that when you interact with a <code>Subject</code>, it is really the <code>SecurityManager</code> behind the scenes that does all the heavy lifting for any <code>Subject</code> security operation. This is reflected in the basic flow diagram above.</p></li><li><p><strong>SecurityManager</strong>: <code>SecurityManager</code> 是Shiro框架的核心并扮演像是一个协调内部组合成一副对象图景的安全组件的”保护伞”角色。 不管怎样，当<code>SecurityManager</code>和其内部的对象图景配置完成后,通常可以不管他 ，应用程序开发大部分时候都花在和<code>Subject</code> 的交互上。</p><p>我们稍后会讨论<code>SecurityManager</code>的细节，但是，当你和<code>Subject</code>交互的时候，意识到在幕后<code>SecurityManager</code> 为任人一个<code>Subject</code>的安全操作做了所有的艰难操作.这也反应在上面的基本流程图上。</p></li><li><p><strong>Realms</strong>: Realms act as the ‘bridge’ or ‘connector’ between Shiro and your application’s security data. When it comes time to actually interact with security-related data like user accounts to perform authentication (login) and authorization (access control), Shiro looks up many of these things from one or more Realms configured for an application.</p><p>In this sense a Realm is essentially a security-specific <a href="https://en.wikipedia.org/wiki/Data_access_object" target="_blank" rel="noopener">DAO</a>: it encapsulates connection details for data sources and makes the associated data available to Shiro as needed. When configuring Shiro, you must specify at least one Realm to use for authentication and/or authorization. The <code>SecurityManager</code>may be configured with multiple Realms, but at least one is required.</p><p>Shiro provides out-of-the-box Realms to connect to a number of security data sources (aka directories) such as LDAP, relational databases (JDBC), text configuration sources like INI and properties files, and more. You can plug-in your own Realm implementations to represent custom data sources if the default Realms do not meet your needs.</p><p>Like other internal components, the Shiro <code>SecurityManager</code> manages how Realms are used to acquire security and identity data to be represented as <code>Subject</code> instances.</p></li><li><p><strong>Realms</strong>: Realms 扮演者Shiro 和 你的应用程序的安全数据之间的’桥梁’或者说’连接器’的角色。当到Shrio运行到与安全相关的数据交互的时候，如用户账户去执行 认证(登录)，授权(访问控制)， Shiro 从应用程序配置好的一个或多个Realm中搜寻这些数据</p><p>从这个角度，Realm 本质上是一个特定的安全DAO(Data Access Object):他封装和数据源连接的细节，并且使得相关的数据按Shiro所需的方式被Shiro使用。当配置Shiro时，你必须至少指定一个用户认证和（或）授权的Relam。<code>SecurityManager</code>可能会配置多个领域，但至少需要一个</p><p>Shiro 提供一些开箱即用的Realm去和一些安全数据源建立连接，比如说LDAP(轻量级目录访问协议)，关系型数据库(JDBC)，文本配置源如ini和属性文件等等。如果默认的Realms不满足你的需求，你可以插入你自己的领域实现去表示自定义的数据源</p><p>就像其他的内部组件,Shiro的 <code>SecurityManager</code>管理着如何将 Realms 获取安全和身份数据的表示为<code>Subject</code>实例</p></li></ul></blockquote><hr><h2 id="Detailed-Architecture-详细的架构"><a href="#Detailed-Architecture-详细的架构" class="headerlink" title="Detailed Architecture(详细的架构)"></a><a href="http://shiro.apache.org/architecture.html#detailed-architecture" target="_blank" rel="noopener">Detailed Architecture</a>(详细的架构)</h2><p>The following diagram shows Shiro’s core architectural concepts followed by short summaries of each:</p><p>下面展示了Shiro的核心架构概念，并为每一个概念有一个简短的总结</p><p><img src="/sunshine-carroll.github.io/2020/02/29/Shiro-Architecture/ShiroArchitecture.png" alt="ShiroArchitecture"></p><blockquote><ul><li><p><strong>Subject</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/subject/Subject.html" target="_blank" rel="noopener"><code>org.apache.shiro.subject.Subject</code></a>)<br>A security-specific ‘view’ of the entity (user, 3rd-party service, cron job, etc) currently interacting with the software.</p></li><li><p><strong>Subject</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/subject/Subject.html" target="_blank" rel="noopener"><code>org.apache.shiro.subject.Subject</code></a>)</p><p>当前与软件交互的实体(用户，第三方服务，定时任务等等)的一个特定的安全’视图’</p></li><li><p><strong>SecurityManager</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/mgt/SecurityManager.html" target="_blank" rel="noopener">org.apache.shiro.mgt.SecurityManager</a>)<br>As mentioned above, the <code>SecurityManager</code> is the heart of Shiro’s architecture. It is mostly an ‘umbrella’ object that coordinates its managed components to ensure they work smoothly together. It also manages Shiro’s view of every application user, so it knows how to perform security operations per user.</p></li><li><p><strong>SecurityManager</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/mgt/SecurityManager.html" target="_blank" rel="noopener">org.apache.shiro.mgt.SecurityManager</a>)</p><p>如上所述，<code>SecurityManager</code>时Shiro架构的核心.通常是协调受管组件，确保他们一起平稳的工作的’保护伞’,他管理着每一个应用程序用户的视图，因此他知道如何为每一个用户执行安全的操作</p></li><li><p><strong>Authenticator</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/Authenticator.html" target="_blank" rel="noopener">org.apache.shiro.authc.Authenticator</a>)<br>The <code>Authenticator</code> is the component that is responsible for executing and reacting to authentication (log-in) attempts by users. When a user tries to log-in, that logic is executed by the <code>Authenticator</code>. The <code>Authenticator</code> knows how to coordinate with one or more <code>Realms</code> that store relevant user/account information. The data obtained from these <code>Realms</code> is used to verify the user’s identity to guarantee the user really is who they say they are.</p></li><li><p><strong>Authenticator</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/Authenticator.html" target="_blank" rel="noopener">org.apache.shiro.authc.Authenticator</a>)</p><p><code>Authenticator</code>是以执行和反应用户的认证（登录）为职责的组件。当一个用户试图登录时，这个逻辑就被<code>Authenticator</code>执行。<code>Authenticator</code>知道如何与存储者用户/账户信息的一个或多个<code>Realm</code>协作。由这些<code>Realms</code>维护的数据用于验证用户的身份，保证用户的确是他们所说的那一个</p></li><li><p><strong>Authorizer</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authz/Authorizer.html" target="_blank" rel="noopener">org.apache.shiro.authz.Authorizer</a>)<br>The <code>Authorizer</code> is the component responsible determining users’ access control in the application. It is the mechanism that ultimately says if a user is allowed to do something or not. Like the <code>Authenticator</code>, the <code>Authorizer</code> also knows how to coordinate with multiple back-end data sources to access role and permission information. The <code>Authorizer</code> uses this information to determine exactly if a user is allowed to perform a given action.</p></li><li><p><code>Authorizer</code>是对确定应用程序中用户的访问控制负责的组件。这个机制最终判断一个用户允许或不允许做一些事。就像<code>Authenticator</code>，<code>Authorizer</code> 知道如何使用多个后台数据源企业访问角色和权限信息。<code>Authorizer</code>使用这些数据去正确的确定一个用户是否允许执行一个给定的行为</p></li><li><p><strong>SessionManager</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/session/mgt/SessionManager.html" target="_blank" rel="noopener">org.apache.shiro.session.mgt.SessionManager</a>)<br>The <code>SessionManager</code> knows how to create and manage user <code>Session</code> lifecycles to provide a robust Session experience for users in all environments. This is a unique feature in the world of security frameworks - Shiro has the ability to natively manage user Sessions in any environment, even if there is no Web/Servlet or EJB container available. By default, Shiro will use an existing session mechanism if available, (e.g. Servlet Container), but if there isn’t one, such as in a standalone application or non-web environment, it will use its built-in enterprise session management to offer the same programming experience. The <code>SessionDAO</code> exists to allow any datasource to be used to persist sessions.</p></li><li><p><code>SessionManager</code>知道如何创建和管理用户<code>Session</code>的生命周期并在任何环境下提供给用户一个健壮的会话体验。在安全框架的世界中这是个独特的特性—即使不在Web/Servlet或EJB容器中，Shiro天然的有在任何环境下管理用户会话的能力。如果有可以使用的会话机制(如Servlet Container)，Shiro默认会使用它,但是如果没有，就像独立的应用程序或非web环境下，他会使用他内建的企业级会话管理以提供相同的编程体验。<code>SessionDAO</code>为允许任何用于持久化会话的数据源而存在</p></li><li><p><strong>CacheManager</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/cache/CacheManager.html" target="_blank" rel="noopener">org.apache.shiro.cache.CacheManager</a>)<br>The <code>CacheManager</code> creates and manages <code>Cache</code> instance lifecycles used by other Shiro components. Because Shiro can access many back-end data sources for authentication, authorization and session management, caching has always been a first-class  feature in the framework to improve performance while using these data sources. Any of the modern open-source and/or enterprise caching products can be plugged in to Shiro to provide a fast and efficient user-experience.</p></li><li><p><strong>CacheManager</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/cache/CacheManager.html" target="_blank" rel="noopener">org.apache.shiro.cache.CacheManager</a>)</p><p><code>CacheManager</code>创建和管理被其他Shiro组件使用的缓存实例的生命周期。由于Shiro 能够访问许多用户认证，授权和会话管理的后台数据，在框架中缓存通常是在使用这些数据源时提高性能的一个优秀的特性。任何一个现代的开源和（或）企业级缓存产品能够嵌入到Shiro中以提高快且高效的用户体验</p></li><li><p><strong>Cryptography</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/crypto/package-summary.html" target="_blank" rel="noopener">org.apache.shiro.crypto.*</a>)<br>Cryptography is a natural addition to an enterprise security framework. Shiro’s <code>crypto</code> package contains easy-to-use and understand representations of crytographic Ciphers, Hashes (aka digests) and different codec implementations. All of the classes in this package are carefully designed to be very easy to use and easy to understand. Anyone who has used Java’s native cryptography support knows it can be a challenging animal to tame. Shiro’s crypto APIs simplify the complicated Java mechanisms and make cryptography easy to use for normal mortal human beings.</p></li><li><p>对于一个企业级安全框架，加密是一个自然而然的功能。Shiro 的<code>crypto</code>包含易于使用和理解的密码学上的加密工具，哈希(众所周知的信息摘要算法 ),和不同的编码解码器实现.在这个包中的所有类，都为易于理解和使用而设计。任何一个用过Java原生的加密支持的人都知道,it can be a challenging animal to tame。Shiro的crypto API 简化这些复杂的Java机制并且让加密功能对正常的普通人来说使用简单。</p></li><li><p><strong>Realms</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/realm/Realm.html" target="_blank" rel="noopener">org.apache.shiro.realm.Realm</a>)<br>As mentioned above, Realms act as the ‘bridge’ or ‘connector’ between Shiro and your application’s security data. When it comes time to actually interact with security-related data like user accounts to perform authentication (login) and authorization (access control), Shiro looks up many of these things from one or more Realms configured for an application. You can configure as many <code>Realms</code> as you need (usually one per data source) and Shiro will coordinate with them as necessary for both authentication and authorization.</p></li><li><p><strong>Realms</strong> (<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/realm/Realm.html" target="_blank" rel="noopener">org.apache.shiro.realm.Realm</a>)</p><p>如上所述，Realm 扮演的Shiro和你应用程序的安全数据的’桥梁’或’连接器’。当到Shrio运行到与安全相关的数据交互的时候，如用户账户去执行 认证(登录)，授权(访问控制)， Shiro 从应用程序配置好的一个或多个Realm中搜寻这些数据。你可以按你的需要的Realm数来配置Realm(通常每个数据源一个Realm)并且Shiro会按需为认证和授权协调他们</p></li></ul></blockquote><hr><h2 id="The-SecurityManager"><a href="#The-SecurityManager" class="headerlink" title="The SecurityManager"></a>The <code>SecurityManager</code></h2><p>Because Shiro’s API encourages a <code>Subject</code>-centric programming approach, most application developers will rarely, if ever, interact with the <code>SecurityManager</code>directly (framework developers however  sometimes find it useful). Even so, it is still important to know how the <code>SecurityManager</code> functions, especially when configuring one for an application.</p><p>由于 Shiro 的API鼓励一个以<code>Subject</code>为中心的编程方式，大多数应用程序开发者将很少的，与<code>SecurityManager</code>交互(框架开发者却有时认为这是非常有用的)。即使如此，知道<code>SecurityManager</code>的功能依旧是重要的,尤其是在配置一个应用程序的时候</p><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a><a href="http://shiro.apache.org/architecture.html#design" target="_blank" rel="noopener">Design</a></h2><p>As stated previously, the application’s <code>SecurityManager</code> performs security operations and manages state for <em>all</em> application users. In Shiro’s default <code>SecurityManager</code> implementations, this includes:</p><p>如前所述,应用程序的<code>SecurityManager</code>执行安全操作并且为所有应用程序用户管理状态。在Shiro默认的<code>SecurityManager</code>实现中他包含:</p><ul><li>Authentication  认证</li><li>Authorization  授权</li><li>Session Management 会话管理</li><li>Cache Management 缓存管理</li><li><a href="http://shiro.apache.org/realm.html" target="_blank" rel="noopener">Realm</a> coordination 领域协作</li><li>Event propagation 事件传递</li><li>“Remember Me” Services ‘记住我’ 服务</li><li>Subject creation 创建Subject</li><li>Logout and more. 登出 等等</li></ul><p>But this is a lot of functionality to try to manage in a single component. And, making these things flexible and customizable would be very difficult if everything were lumped into a single implementation class.</p><p>但是有大量的功能尝试放在单个组件中。并且，如果把所有的东西集中在单个实现类中，让这些功能变得灵活和可自定义将会变得非常困难。</p><p>To simplify configuration and enable flexible configuration/pluggability, Shiro’s implementations are all highly modular in design - so modular in fact, that the SecurityManager implementation (and its class-hierarchy) does not do much at all. Instead, the <code>SecurityManager</code> implementations mostly act as a lightweight ‘container’ component, delegating almost all behavior to nested/wrapped components. This ‘wrapper’ design is reflected in the detailed architecture diagram above.</p><p>为了简化配置并能够灵活的配置化/插件化，Shiro的实现在设计上都高度的模块化。事实上由于如此的模块化，<code>SecurityManager</code> 的实现(和他的类层次结构)没有做太多的事情。反而,<code>SecurityManager</code>的实现扮演者轻量级’容器’组件,将大部分行为委托给内嵌的/包装的的组件.这个’包装器’的设计反应在上面的detailed architecture图中</p><p>While the components actually execute the logic, the <code>SecurityManager</code> implementation knows how and when to coordinate the components for the correct behavior.</p><p>当组件实际执行逻辑时，<code>SecurityManager</code>知道如何以及何时协调这些组件来表现正确的行为</p><p>The <code>SecurityManager</code> implementations and the components are also JavaBeans compatible, which allows you (or a configuration mechanism) to easily customize the pluggable components via standard JavaBeans accessor/mutator methods (get<em>/set</em>). This means the Shiro’s architectural modularity can translate into very easy configuration for custom behavior.</p><p><code>SecurityManager</code>的实现和组件都是JavaBeans兼容的,能够允许你(或其他配置机制)通过标准JavaBeans的访问器/修改器方法(get/set)来简洁的自定义这些可插入的组件。这意味着 Shiro的架构模块能否变化非常简易的配置来自定义行为。</p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
          <category> Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电子书通道</title>
      <link href="/sunshine-carroll.github.io/2020/02/26/%E7%94%B5%E5%AD%90%E4%B9%A6%E9%80%9A%E9%81%93/"/>
      <url>/sunshine-carroll.github.io/2020/02/26/%E7%94%B5%E5%AD%90%E4%B9%A6%E9%80%9A%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li><a href="https://lingcoder.github.io/OnJava8/#/" target="_blank" rel="noopener">On Java 8</a> <sup><a href="#fn_1" id="reffn_1">1</a></sup></li><li><a href="https://jiapengcai.gitbooks.io/effective-java/" target="_blank" rel="noopener">Effective Java 3</a> </li></ul><blockquote id="fn_1"><sup>1</sup>. 相当于《Thinking in Java》的第五版，是一本讲语言基础的经典入门书<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> resources </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档通道</title>
      <link href="/sunshine-carroll.github.io/2020/02/26/%E6%96%87%E6%A1%A3%E9%80%9A%E9%81%93/"/>
      <url>/sunshine-carroll.github.io/2020/02/26/%E6%96%87%E6%A1%A3%E9%80%9A%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><ul><li><a href="https://mybatis.org/mybatis-3/index.html" target="_blank" rel="noopener"><strong>Mybatis</strong></a><sup><a href="#fn_1" id="reffn_1">1</a></sup>     <a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">中文地址</a></li><li><a href="https://mp.baomidou.com" target="_blank" rel="noopener"><strong>Mybatis-Plus</strong></a><sup><a href="#fn_2" id="reffn_2">2</a></sup> 可中英切换</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li><h2 id="项目构建-依赖管理工具"><a href="#项目构建-依赖管理工具" class="headerlink" title="项目构建,依赖管理工具"></a>项目构建,依赖管理工具</h2></li></ul><h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><p><a href><strong>hexo</strong></a></p><blockquote id="fn_1"><sup>1</sup>.    MyBatis is a first class persistence framework with support for custom SQL, stored procedures and advanced mappings. MyBatis eliminates almost all of the JDBC code and manual setting of parameters and retrieval of results. MyBatis can use simple XML or Annotations for configuration and map primitives, Map interfaces and Java POJOs (Plain Old Java Objects) to database records.<br>        MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><p><sup><a href="#fn_2" id="reffn_2">2</a></sup>:<a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener">MyBatis-Plus</a>（MP for short）is an powerful enhanced tool for <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis</a> , Born To Simplify Development.<br>        MyBatis增强工具,在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>::: warning<br><em>here be dragons</em><br>:::</p>]]></content>
      
      
      <categories>
          
          <category> resources </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸽巢原理</title>
      <link href="/sunshine-carroll.github.io/2020/02/02/%E9%B8%BD%E5%B7%A2%E5%8E%9F%E7%90%86/"/>
      <url>/sunshine-carroll.github.io/2020/02/02/%E9%B8%BD%E5%B7%A2%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="鸽巢原理"><a href="#鸽巢原理" class="headerlink" title="鸽巢原理"></a>鸽巢原理</h2><p>​        如果有$k+1$个或更多的物体放入k个盒子，则至少有一个盒子包含2个或更多的物体。</p><p>证明：<br>            假设没有一个盒子中物体大于1个，那么总物体数≤1×k=k个,和总共有k+1个物体矛盾。</p><hr><h2 id="广义鸽巢原理"><a href="#广义鸽巢原理" class="headerlink" title="广义鸽巢原理"></a>广义鸽巢原理</h2><p>​            如果$N$个物体放入$K$个盒子，那么至少一个盒子包含了$\lceil\frac{N}{K}\rceil$个物体。</p><p>证明：<br>            假如没有一个盒子的物体数超过$\lceil\frac{N}{K}\rceil$,那么总物体数最多有</p><script type="math/tex; mode=display">k（\lceil\frac{N}{K}\rceil-1）<k（\frac{N}{K}+1-1）=N</script><p>​            这和总物体个数为N互相矛盾</p><hr><h2 id="n-2-1-个任意实数的子序列问题"><a href="#n-2-1-个任意实数的子序列问题" class="headerlink" title="$n^2+1$个任意实数的子序列问题"></a>$n^2+1$个任意实数的子序列问题</h2><p>​        每个由$n^2+1$个不同实数构成的序列都包含着一个长为n+1的严格递增子序列或者严格递减子序列。</p><p>证明：<br>            设$a<em>1,a_2,\cdots,a</em>{n^2+1}$是$n^2+1$个不同实数构成的序列，对与序列中的每一个项$a_k$都有一个有序对$(i_k,d_k)$，$i_k$表示从$a_k$开始最长递增子序列的长度,$d_k$表示从$a_k$开始最长递减子序列的长度.<br>            如果每个由$n^2+1$个不同实数构成的序列不存在一个长为n+1的严格递增子序列或者严格递减子序列，那么子序列的长度最多为n，有序对$(i_k,d_k)$有$n^2$种可能，但一共有$n+1$个有序对，那么必定存在$a_s$,$a_j$$s<j$,使得$(i_s,d_s)=(i_j,d_j)$, 因为序列中实数的个数是不同的，所以$a_s<a_j$或$a_s>a_j$<br>            如果$a_s<a_j$,那么从$a_j$开始长度为$i_j$的严格递增子序列中加上$a_s$就构成的从$a_s$开始长度为$i_j+1=i_s+1$的严格递增子序列，这个与从$a_s$开始最长严格递增子序列为$i_s$矛盾。<br>            同理，如果$a_s&gt;a_j$,那么从$a_j$开始长度为$d_j$的严格递减子序列中加上$a_s$就构成的从$a_s$开始长度为$d_j+1=d_s+1$的严格递减子序列，这个与从$a_s$开始最长严格递减子序列为$d_s$矛盾。</a_j$,那么从$a_j$开始长度为$i_j$的严格递增子序列中加上$a_s$就构成的从$a_s$开始长度为$i_j+1=i_s+1$的严格递增子序列，这个与从$a_s$开始最长严格递增子序列为$i_s$矛盾。<br></j$,使得$(i_s,d_s)=(i_j,d_j)$,></p><hr><h2 id="拉姆齐数"><a href="#拉姆齐数" class="headerlink" title="拉姆齐数"></a>拉姆齐数</h2><p>​        拉姆齐数是$R(m,n)$（m,n是大于等于2的正整数）表示，如果一个晚会上两个人两两是朋友或敌人，那么在一个晚会上使得m个人两两是朋友，或n个人两两是敌人所需的最小人数。</p>]]></content>
      
      
      <categories>
          
          <category> discrete mathmatics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discrete mathmatics </tag>
            
            <tag> counting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数的基础</title>
      <link href="/sunshine-carroll.github.io/2020/02/01/%E8%AE%A1%E6%95%B0%E7%9A%84%E5%9F%BA%E7%A1%80/"/>
      <url>/sunshine-carroll.github.io/2020/02/01/%E8%AE%A1%E6%95%B0%E7%9A%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="乘积规则"><a href="#乘积规则" class="headerlink" title="乘积规则"></a>乘积规则</h2><p>当一个过程由独立的任务组成时可以使用乘积规则。<br>假设一个过程可以被分解为两个任务。如果完成第一个任务的方式有$n_1$种并且对于每个完成第一个任务的方式，完成第二个任务的方式有$n_2$种，那么完成这个过程有$n_1n_2$种方式。</p><h2 id="THE-PRODUCT-RULE"><a href="#THE-PRODUCT-RULE" class="headerlink" title="THE PRODUCT RULE"></a>THE PRODUCT RULE</h2><p>​        The product rule applies when a procedure is made up of separate tasks.<br>        Suppose that a procedure can be broken down into a sequence of two tasks. If there are $n_1$ ways to do the ﬁrst task and for each of these ways of doing the ﬁrst task, there are $n_2$ ways to do the second task, then there are$n_1n_2$ ways to do the procedure.</p><hr><h2 id="求和法则"><a href="#求和法则" class="headerlink" title="求和法则"></a>求和法则</h2><p>​        如果一个任务能被$n_1$中方式的一种或$n_2$种方式中的一种完成。在$n_1$种方式的集合中没有一个与$n_2$种方式的集合中的元素相同。那么一共有$n_1+n_2$种方式完成这个任务</p><h2 id="THE-SUM-RULE"><a href="#THE-SUM-RULE" class="headerlink" title="THE SUM RULE"></a>THE SUM RULE</h2><p>​        If a task can be done either in one of $n_1$ ways or in one of $n_2$ ways, where none of the set of $n_1$ ways is the same as any of the set of $n_2$ ways, then there are $n_1+n_2$  ways to do the task.</p><hr><h2 id="减法法则-两个集合的容斥原理"><a href="#减法法则-两个集合的容斥原理" class="headerlink" title="减法法则(两个集合的容斥原理)"></a>减法法则(两个集合的容斥原理)</h2><p>​        如果一个任务能用$n_1$种方式或$n_2$种方式的其中一种完成，那么完成这个任务的总方法数为$n_1+n_2$减去这两类方法中相同的方法数</p><h2 id="THE-SUBTRACTION-RULE"><a href="#THE-SUBTRACTION-RULE" class="headerlink" title="THE SUBTRACTION RULE"></a>THE SUBTRACTION RULE</h2><p>If a task can be done in either $n_1$ ways or $n_2$ ways, then the number of ways to do the task is $n_1 + n_2$ minus the number of ways to do the task that are common to the two different ways.</p><script type="math/tex; mode=display">| A_1∪A_2 | = | A_1 | + | A_2 | − | A_1 ∩ A_2 |</script><hr><h2 id="除法法则"><a href="#除法法则" class="headerlink" title="除法法则"></a>除法法则</h2><p>​        如果一个任务能使用一个有n种方式完成,其中对于每一种方式w，在n种方式中都有d个方式和w方式一样。那么完成这个任务有方法数为$\frac{n}{d}$ </p><p>用集合语言描述:<br>        If the ﬁnite set A is the union of n pairwise disjoint subsets each with d elements, then $n = \frac{| A |}{d}$.<br>        如果一个有限集A是n个互斥的集合的并集,其中每个集合都有d个元素，那么$n = \frac{| A |}{d}$</p><p>用函数语言描述:<br>        If f is a function from A to B where A and B are ﬁnite sets, and that for every value $y ∈ B$ there are exactly d values $x ∈ A$ such that $f (x) = y$ (in which case, we say that f is d-to-one), then$｜B｜= \frac{| A |}{d}$.</p><p>​        如果 f 是一个A到B的函数，A，B都为有限集,对于任意一个$y ∈ B$都有d个$x ∈ A$ 使得$f (x) = y$(在这种情况下，我们称f是d到1的),那么$｜B｜= \frac{| A |}{d}$</p><h2 id="The-Division-Rule"><a href="#The-Division-Rule" class="headerlink" title="The Division Rule"></a>The Division Rule</h2><p>​        There are $\frac{n}{d}$ ways to do a task if it can be done using a procedure that can be carried out in n ways, and for every way w, exactly d of the n ways correspond to way w.</p><h2 id="一些结论"><a href="#一些结论" class="headerlink" title="一些结论"></a>一些结论</h2><ol><li><p>从m元素集合到n元素集合有多少个函数————$n^m$</p><p>为任意一个元素x属于m指派一个元素y属于n有n种方式，有m个元素要指派，指派第一个有n种方式，在指派第一个元素后指派第二个元素有$n×n$种方式,以此类推一共有$n^m$种方式</p></li><li><p>从m元素集合到n元素集合有多少个一对一函数————$n(n-1)(n-2)\cdots(n-m+1)$ 其中$m≤n$否则不可能存在一对一函数.</p><p>指派第一个有n种方式，在指派第一个元素后指派第二个元素有$n×(n-1)$种方式,以此类推一共有$n(n-1)(n-2)\cdots(n-m+1)$种方式</p></li><li><p>从m元素集合到n元素集合有多少个部分函数——-$(n+1)^m$</p><script type="math/tex; mode=display">\begin{pmatrix}m\\0\end{pmatrix}×1^mn^0+\begin{pmatrix}m\\1\end{pmatrix}×1^{m-1}n^{1}+\dots+\begin{pmatrix}m\\m\end{pmatrix}×1^{0}n^{m}=(1+n)^m</script><p>二项式定理如下</p><script type="math/tex; mode=display">(x+y)^n=\sum_{j=0}^{n}\begin{pmatrix}n\\j\end{pmatrix}x^{n-j}y^j=\begin{pmatrix}n\\0\end{pmatrix}×x^ny^0+\begin{pmatrix}n\\1\end{pmatrix}×x^{n-1}y^{1}+\dots+\begin{pmatrix}n\\n\end{pmatrix}×x^{0}y^{n}</script><p>当x为1,y为n,n为m时，就是m元素集合到n元素集合部分函数数量的表达式</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> sunshine </category>
          
          <category> discrete mathmatics </category>
          
          <category> counting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discrete mathmatics </tag>
            
            <tag> counting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>良序性，数学归纳法，强归纳法，结构归纳法</title>
      <link href="/sunshine-carroll.github.io/2020/01/29/%E8%89%AF%E5%BA%8F%E6%80%A7%EF%BC%8C%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95%EF%BC%8C%E5%BC%BA%E5%BD%92%E7%BA%B3%E6%B3%95%EF%BC%8C%E7%BB%93%E6%9E%84%E5%BD%92%E7%BA%B3%E6%B3%95/"/>
      <url>/sunshine-carroll.github.io/2020/01/29/%E8%89%AF%E5%BA%8F%E6%80%A7%EF%BC%8C%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95%EF%BC%8C%E5%BC%BA%E5%BD%92%E7%BA%B3%E6%B3%95%EF%BC%8C%E7%BB%93%E6%9E%84%E5%BD%92%E7%BA%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1正整数集合上的公理（Axioms-for-Positive-Integers）"><a href="#1正整数集合上的公理（Axioms-for-Positive-Integers）" class="headerlink" title="1正整数集合上的公理（Axioms for Positive Integers）"></a>1正整数集合上的公理（Axioms for Positive Integers）</h2><ol><li>数1是正整数</li><li>如果n是正整数那么n+1(n的后继也是正整数)</li><li>每个大于1的正整数都是一个正整数的后继</li><li>良序性(The Well-Ordering Property):正整数集合的每个非空子集都有一个最小元</li></ol><h2 id="2介绍-introduction"><a href="#2介绍-introduction" class="headerlink" title="2介绍(introduction)"></a>2介绍(introduction)</h2><p>良序性公理—&gt;数学归纳法—&gt;强归纳法—&gt;结构归纳法</p><h3 id="2-1数学归纳法"><a href="#2-1数学归纳法" class="headerlink" title="2.1数学归纳法"></a>2.1数学归纳法</h3><h4 id="2-1-1描述"><a href="#2-1-1描述" class="headerlink" title="2.1.1描述"></a>2.1.1描述</h4><p>​        很多命题都断言，某个性质对所有有正整数来说都为真。数学归纳法是证明这类命题的一个有效证明方法。首先证明命题对于正整数1成立。然后证明这个命题如果对于一个正整数成立，那么对于下一个正整数也必然成立。这证明方法基于下面这个推理规则。</p><script type="math/tex; mode=display">∀n∈Z^*,\ \ \ \ (P(1)∧(∀k∈Z^*,P(k)→P(k+1))  →  ∀nP(n)</script><p>也就是说对于任意正整数n 如果$P(1)$且$∀k∈Z^*,P(k)→P(k+1)$,那么∀nP(n)也成立。</p><h4 id="2-1-2可以使用使用数学归纳法证明的命题"><a href="#2-1-2可以使用使用数学归纳法证明的命题" class="headerlink" title="2.1.2可以使用使用数学归纳法证明的命题"></a>2.1.2可以使用使用数学归纳法证明的命题</h4><ol><li><p>对于一个无限长的多米诺骨牌，每张多米诺骨牌都直立着，如果第一个多米诺骨牌倒了，并且如果一张多米诺骨牌倒了，下一张多米诺骨牌也会倒，那么所有的多米诺骨牌都会倒。</p></li><li><p>前n个正整数之和为$\frac{n(n-1)}{2}$</p></li><li><p>前n个正奇数之和为$n^2$</p></li><li><p>含有n个元素的有限集的子集个数为$2^n$，n为非负整数(nonpositive integer)</p></li><li><p>假设我们一组讲座，每个讲座都有开始时间和结束时间。假如讲座一旦开始就会持续到结束，两个讲座不能同时进行，一个讲座结束后另一个讲座就开始，演讲厅只有一个，目的是尽可能安排更多的讲座。数学归纳法可以证明每一次选择与已选讲座相容的讲座中，结束时间最早的讲座。就能安排更多的讲座。</p></li><li><p>只要n是一个正整数，则$f(x)=x^n$ 的导数就等于 $nx^{n-1}$，注意命题是微积分中求导法则 $f(x)=x^n$ 的导数为$nx^{n-1}$</p><p>的论域不同，具体看一下高等数学书就知道了</p></li></ol><h4 id="2-1-3扩展"><a href="#2-1-3扩展" class="headerlink" title="2.1.3扩展"></a>2.1.3扩展</h4><p>​        在逻辑学中，通过推理规则从前提导出结论的叫演绎推理，寻找结论来支持证据的叫归纳推理，数学证明包括使用了数学归纳法的证明都是演绎推理。这个是术语的冲突。</p><p>​        数学归纳法的基础步骤不一定要从1开始，有时候需要证明对于任意的$n&gt;=b,P(n)$为真,其中n，b是整数，b可以中正数负数或0</p><p>​        有时候数学归纳法不能直接证明一个结论，但是可以证明一个更广的结论，从而得到需要证明的结论，这个方法叫归纳载入</p><h3 id="2-2强归纳法"><a href="#2-2强归纳法" class="headerlink" title="2.2强归纳法"></a>2.2强归纳法</h3><h4 id="2-2-1描述"><a href="#2-2-1描述" class="headerlink" title="2.2.1描述"></a>2.2.1描述</h4><p>​        强归纳法可以使用在直接使用数学归纳法不容易证明的命题上。他的基础步骤和数学归纳法相同，首先证明$P(1)$为真，归纳步骤不同，归纳步骤需要证明对于任意不大于k的正整数 j ,$P(j)$为真，那么$P(k+1)$也为真。表示为逻辑语句就是</p><script type="math/tex; mode=display">∀n∈Z^*,\ \ \ \ (P(1)∧(∀k∈Z^*,P(1)∧P(2)∧..∧P(k-1)∧P(k)→P(k+1))  →  ∀nP(n)</script><h4 id="2-2-2强归纳法可以证明的一些命题"><a href="#2-2-2强归纳法可以证明的一些命题" class="headerlink" title="2.2.2强归纳法可以证明的一些命题"></a>2.2.2强归纳法可以证明的一些命题</h4><ol><li>每个正整数都可以写成素数的乘积</li><li>具有n条边的简单多边形能够被三角形化为n-2分三角形，n是大于等于3的整数</li><li>$\sqrt2$是无理数(第一个被发现的无理数就是$\sqrt2$,希帕索斯也因此被丢进了爱琴海)</li><li>任意正整数n都可以写成2的不同次幂的和</li></ol><h4 id="2-3结构归纳法"><a href="#2-3结构归纳法" class="headerlink" title="2.3结构归纳法"></a>2.3结构归纳法</h4><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h2 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h2><h3 id="良序性-The-Well-Ordering-Property-—-gt-数学归纳法"><a href="#良序性-The-Well-Ordering-Property-—-gt-数学归纳法" class="headerlink" title="良序性(The Well-Ordering Property) —&gt; 数学归纳法"></a>良序性(The Well-Ordering Property) —&gt; 数学归纳法</h3><p>​        先看良序性公理的陈述，正整数集合的每个非空子集都有一个最小元。需要证明的是<br>对于任意正整数n 如果$P(1)$且$∀k∈Z^*,P(k)→P(k+1)$ 能够推出∀nP(n)。</p><hr><p>Proof 1:</p><p>​        首先先注意到有两个前提，第一个是P(1) ≡ T ,</p><p>​                                                    第二个是$∀k∈Z^*,P(k)→P(k+1)$  ≡ T</p><p>​        假设S是使得P(n)为假的值的集合。要证数学归纳法为真$∀n∈Z^<em>,\ \ \ \ (P(1)∧(∀k∈Z^</em>,P(k)→P(k+1))  →  ∀nP(n)$</p><p>可以证明S = ∅ 或者证明 S 非空为假。这里我们证明 S 非空为假。</p><p>​        假设数学归纳法结论为假,也就是说结论的否定为真，即$¬∀nP(n) ≡ T$ </p><p>$¬∀nP(n)$ ≡ ∃n,¬P(n) 也就是说集合S非空。S是正整数集合的子集且非空，那么根据良序性公理，S必定存在最小元，假设该最小元为m，那么m-1 不属于集合S。</p><p>​        因此P(m-1) 为真。</p><p>​        又因为$∀k∈Z^*,P(k)→P(k+1)$为真，则$P(m-1)→P(m)$ ，$P(m) ≡ T$，这与$P(m) ≡ F$ 矛盾，所以$∀nP(n)$</p><hr><p>对于Proof 1 的分析</p><p>​        首先我们希望在对于任意正整数n 如果$P(1)$和$∀k∈Z^*,P(k)→P(k+1)$都为真的前提下，证明$∀nP(n)$也为真.这是直接证明的一个例子。</p><p>​        随后我们发现$∀nP(n)$  等价于S为空,这一步将证明$∀nP(n)$ 转换为证明 S 为空集。为了证明这一点，我们假设S非空，并通过他来得到一个矛盾式(即永远为假的命题)。即P(m)为真并且P(m)为假的矛盾，这是归谬证明法的一个例子。</p><p>后面得到了S非空为假，即S为空为真，因为S为空→$∀nP(n)$，S为空，于是$∀nP(n)$ 为真，这个是假言推理的一个例子。</p><h3 id="数学归纳法—-gt-结构归纳法"><a href="#数学归纳法—-gt-结构归纳法" class="headerlink" title="数学归纳法—&gt;结构归纳法"></a>数学归纳法—&gt;结构归纳法</h3>]]></content>
      
      
      <categories>
          
          <category> sunshine </category>
          
          <category> discrete mathematics </category>
          
          <category> proof </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discrete mathmatics </tag>
            
            <tag> proof </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
